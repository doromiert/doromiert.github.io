import {
  Lexer,
  Slugger
} from "./chunk-5ODPNHJM.js";
import {
  add_locations,
  check_target,
  clsx,
  component,
  createEventDispatcher,
  each,
  hmr,
  html,
  if_block,
  index,
  init,
  legacy_api,
  legacy_rest_props,
  onMount,
  prop,
  set_attribute,
  set_class,
  slot,
  spread_props,
  wrap_snippet
} from "./chunk-UM2LJHA7.js";
import {
  append,
  comment,
  set_text,
  template,
  text
} from "./chunk-5VP6A6XA.js";
import "./chunk-U7P2NEEE.js";
import {
  FILENAME,
  HMR,
  child,
  deep_read_state,
  derived_safe_equal,
  first_child,
  get,
  getContext,
  legacy_pre_effect,
  legacy_pre_effect_reset,
  mark_module_end,
  mark_module_start,
  mutable_state,
  pop,
  push,
  reset,
  set,
  setContext,
  sibling,
  strict_equals,
  template_effect
} from "./chunk-5NTB63LC.js";
import "./chunk-NUQPLINK.js";
import "./chunk-HNWPC2PS.js";
import "./chunk-RIXFT5AQ.js";
import "./chunk-RVAV4ZRS.js";
import "./chunk-YON2XXEL.js";
import "./chunk-5WRI5ZAA.js";

// node_modules/svelte-markdown/src/supress-warnings.js
function supressWarnings() {
  const origWarn = console.warn;
  console.warn = (message) => {
    if (message.includes("unknown prop")) return;
    if (message.includes("unexpected slot")) return;
    origWarn(message);
  };
  onMount(() => {
    console.warn = origWarn;
  });
}

// node_modules/svelte-markdown/src/Parser.svelte
mark_module_start();
Parser[FILENAME] = "node_modules/svelte-markdown/src/Parser.svelte";
var root_6 = add_locations(template(`<!> <!>`, 1), Parser[FILENAME], []);
function Parser($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "type",
    "tokens",
    "header",
    "rows",
    "ordered",
    "renderers"
  ]);
  push($$props, false, Parser);
  let type = prop($$props, "type", 8, void 0);
  let tokens = prop($$props, "tokens", 8, void 0);
  let header = prop($$props, "header", 8, void 0);
  let rows = prop($$props, "rows", 8, void 0);
  let ordered = prop($$props, "ordered", 8, false);
  let renderers = prop($$props, "renderers", 8);
  supressWarnings();
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      each(node_1, 1, tokens, index, ($$anchor3, token) => {
        var fragment_2 = comment();
        var node_2 = first_child(fragment_2);
        Parser(node_2, spread_props(() => get(token), {
          get renderers() {
            return renderers();
          }
        }));
        append($$anchor3, fragment_2);
      });
      append($$anchor2, fragment_1);
    };
    var alternate_4 = ($$anchor2) => {
      var fragment_3 = comment();
      var node_3 = first_child(fragment_3);
      {
        var consequent_5 = ($$anchor3) => {
          var fragment_4 = comment();
          var node_4 = first_child(fragment_4);
          {
            var consequent_1 = ($$anchor4) => {
              var fragment_5 = comment();
              var node_5 = first_child(fragment_5);
              component(node_5, () => renderers().table, ($$anchor5, $$component) => {
                $$component($$anchor5, {
                  children: wrap_snippet(Parser, ($$anchor6, $$slotProps) => {
                    var fragment_6 = root_6();
                    var node_6 = first_child(fragment_6);
                    component(node_6, () => renderers().tablehead, ($$anchor7, $$component2) => {
                      $$component2($$anchor7, {
                        children: wrap_snippet(Parser, ($$anchor8, $$slotProps2) => {
                          var fragment_7 = comment();
                          var node_7 = first_child(fragment_7);
                          component(node_7, () => renderers().tablerow, ($$anchor9, $$component3) => {
                            $$component3($$anchor9, {
                              children: wrap_snippet(Parser, ($$anchor10, $$slotProps3) => {
                                var fragment_8 = comment();
                                var node_8 = first_child(fragment_8);
                                each(node_8, 1, header, index, ($$anchor11, headerItem, i) => {
                                  var fragment_9 = comment();
                                  var node_9 = first_child(fragment_9);
                                  const expression = derived_safe_equal(() => $$restProps.align[i] || "center");
                                  component(node_9, () => renderers().tablecell, ($$anchor12, $$component4) => {
                                    $$component4($$anchor12, {
                                      header: true,
                                      get align() {
                                        return get(expression);
                                      },
                                      children: wrap_snippet(Parser, ($$anchor13, $$slotProps4) => {
                                        var fragment_10 = comment();
                                        var node_10 = first_child(fragment_10);
                                        Parser(node_10, {
                                          get tokens() {
                                            return get(headerItem).tokens;
                                          },
                                          get renderers() {
                                            return renderers();
                                          }
                                        });
                                        append($$anchor13, fragment_10);
                                      }),
                                      $$slots: { default: true }
                                    });
                                  });
                                  append($$anchor11, fragment_9);
                                });
                                append($$anchor10, fragment_8);
                              }),
                              $$slots: { default: true }
                            });
                          });
                          append($$anchor8, fragment_7);
                        }),
                        $$slots: { default: true }
                      });
                    });
                    var node_11 = sibling(node_6, 2);
                    component(node_11, () => renderers().tablebody, ($$anchor7, $$component2) => {
                      $$component2($$anchor7, {
                        children: wrap_snippet(Parser, ($$anchor8, $$slotProps2) => {
                          var fragment_11 = comment();
                          var node_12 = first_child(fragment_11);
                          each(node_12, 1, rows, index, ($$anchor9, row) => {
                            var fragment_12 = comment();
                            var node_13 = first_child(fragment_12);
                            component(node_13, () => renderers().tablerow, ($$anchor10, $$component3) => {
                              $$component3($$anchor10, {
                                children: wrap_snippet(Parser, ($$anchor11, $$slotProps3) => {
                                  var fragment_13 = comment();
                                  var node_14 = first_child(fragment_13);
                                  each(node_14, 1, () => get(row), index, ($$anchor12, cells, i) => {
                                    var fragment_14 = comment();
                                    var node_15 = first_child(fragment_14);
                                    const expression_1 = derived_safe_equal(() => $$restProps.align[i] || "center");
                                    component(node_15, () => renderers().tablecell, ($$anchor13, $$component4) => {
                                      $$component4($$anchor13, {
                                        header: false,
                                        get align() {
                                          return get(expression_1);
                                        },
                                        children: wrap_snippet(Parser, ($$anchor14, $$slotProps4) => {
                                          var fragment_15 = comment();
                                          var node_16 = first_child(fragment_15);
                                          Parser(node_16, {
                                            get tokens() {
                                              return get(cells).tokens;
                                            },
                                            get renderers() {
                                              return renderers();
                                            }
                                          });
                                          append($$anchor14, fragment_15);
                                        }),
                                        $$slots: { default: true }
                                      });
                                    });
                                    append($$anchor12, fragment_14);
                                  });
                                  append($$anchor11, fragment_13);
                                }),
                                $$slots: { default: true }
                              });
                            });
                            append($$anchor9, fragment_12);
                          });
                          append($$anchor8, fragment_11);
                        }),
                        $$slots: { default: true }
                      });
                    });
                    append($$anchor6, fragment_6);
                  }),
                  $$slots: { default: true }
                });
              });
              append($$anchor4, fragment_5);
            };
            var alternate_3 = ($$anchor4) => {
              var fragment_16 = comment();
              var node_17 = first_child(fragment_16);
              {
                var consequent_3 = ($$anchor5) => {
                  var fragment_17 = comment();
                  var node_18 = first_child(fragment_17);
                  {
                    var consequent_2 = ($$anchor6) => {
                      var fragment_18 = comment();
                      var node_19 = first_child(fragment_18);
                      component(node_19, () => renderers().list, ($$anchor7, $$component) => {
                        $$component($$anchor7, spread_props(
                          {
                            get ordered() {
                              return ordered();
                            }
                          },
                          () => $$restProps,
                          {
                            children: wrap_snippet(Parser, ($$anchor8, $$slotProps) => {
                              var fragment_19 = comment();
                              var node_20 = first_child(fragment_19);
                              each(node_20, 1, () => $$restProps.items, index, ($$anchor9, item) => {
                                var fragment_20 = comment();
                                var node_21 = first_child(fragment_20);
                                component(node_21, () => renderers().orderedlistitem || renderers().listitem, ($$anchor10, $$component2) => {
                                  $$component2($$anchor10, spread_props(() => get(item), {
                                    children: wrap_snippet(Parser, ($$anchor11, $$slotProps2) => {
                                      var fragment_21 = comment();
                                      var node_22 = first_child(fragment_21);
                                      Parser(node_22, {
                                        get tokens() {
                                          return get(item).tokens;
                                        },
                                        get renderers() {
                                          return renderers();
                                        }
                                      });
                                      append($$anchor11, fragment_21);
                                    }),
                                    $$slots: { default: true }
                                  }));
                                });
                                append($$anchor9, fragment_20);
                              });
                              append($$anchor8, fragment_19);
                            }),
                            $$slots: { default: true }
                          }
                        ));
                      });
                      append($$anchor6, fragment_18);
                    };
                    var alternate = ($$anchor6) => {
                      var fragment_22 = comment();
                      var node_23 = first_child(fragment_22);
                      component(node_23, () => renderers().list, ($$anchor7, $$component) => {
                        $$component($$anchor7, spread_props(
                          {
                            get ordered() {
                              return ordered();
                            }
                          },
                          () => $$restProps,
                          {
                            children: wrap_snippet(Parser, ($$anchor8, $$slotProps) => {
                              var fragment_23 = comment();
                              var node_24 = first_child(fragment_23);
                              each(node_24, 1, () => $$restProps.items, index, ($$anchor9, item) => {
                                var fragment_24 = comment();
                                var node_25 = first_child(fragment_24);
                                component(node_25, () => renderers().unorderedlistitem || renderers().listitem, ($$anchor10, $$component2) => {
                                  $$component2($$anchor10, spread_props(() => get(item), {
                                    children: wrap_snippet(Parser, ($$anchor11, $$slotProps2) => {
                                      var fragment_25 = comment();
                                      var node_26 = first_child(fragment_25);
                                      Parser(node_26, {
                                        get tokens() {
                                          return get(item).tokens;
                                        },
                                        get renderers() {
                                          return renderers();
                                        }
                                      });
                                      append($$anchor11, fragment_25);
                                    }),
                                    $$slots: { default: true }
                                  }));
                                });
                                append($$anchor9, fragment_24);
                              });
                              append($$anchor8, fragment_23);
                            }),
                            $$slots: { default: true }
                          }
                        ));
                      });
                      append($$anchor6, fragment_22);
                    };
                    if_block(node_18, ($$render) => {
                      if (ordered()) $$render(consequent_2);
                      else $$render(alternate, false);
                    });
                  }
                  append($$anchor5, fragment_17);
                };
                var alternate_2 = ($$anchor5) => {
                  var fragment_26 = comment();
                  var node_27 = first_child(fragment_26);
                  component(node_27, () => renderers()[type()], ($$anchor6, $$component) => {
                    $$component($$anchor6, spread_props(() => $$restProps, {
                      children: wrap_snippet(Parser, ($$anchor7, $$slotProps) => {
                        var fragment_27 = comment();
                        var node_28 = first_child(fragment_27);
                        {
                          var consequent_4 = ($$anchor8) => {
                            var fragment_28 = comment();
                            var node_29 = first_child(fragment_28);
                            Parser(node_29, {
                              get tokens() {
                                return tokens();
                              },
                              get renderers() {
                                return renderers();
                              }
                            });
                            append($$anchor8, fragment_28);
                          };
                          var alternate_1 = ($$anchor8) => {
                            var text2 = text();
                            template_effect(() => set_text(text2, $$restProps.raw));
                            append($$anchor8, text2);
                          };
                          if_block(node_28, ($$render) => {
                            if (tokens()) $$render(consequent_4);
                            else $$render(alternate_1, false);
                          });
                        }
                        append($$anchor7, fragment_27);
                      }),
                      $$slots: { default: true }
                    }));
                  });
                  append($$anchor5, fragment_26);
                };
                if_block(
                  node_17,
                  ($$render) => {
                    if (strict_equals(type(), "list")) $$render(consequent_3);
                    else $$render(alternate_2, false);
                  },
                  true
                );
              }
              append($$anchor4, fragment_16);
            };
            if_block(node_4, ($$render) => {
              if (strict_equals(type(), "table")) $$render(consequent_1);
              else $$render(alternate_3, false);
            });
          }
          append($$anchor3, fragment_4);
        };
        if_block(node_3, ($$render) => {
          if (renderers()[type()]) $$render(consequent_5);
        });
      }
      append($$anchor2, fragment_3);
    };
    if_block(node, ($$render) => {
      if (!type()) $$render(consequent);
      else $$render(alternate_4, false);
    });
  }
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Parser = hmr(Parser, () => Parser[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Parser[HMR].source;
    set(Parser[HMR].source, module.default[HMR].original);
  });
}
var Parser_default = Parser;
mark_module_end(Parser);

// node_modules/svelte-markdown/src/context.js
var key = {};

// node_modules/svelte-markdown/src/renderers/Heading.svelte
mark_module_start();
Heading[FILENAME] = "node_modules/svelte-markdown/src/renderers/Heading.svelte";
var root_1 = add_locations(template(`<h1><!></h1>`), Heading[FILENAME], [[17, 2]]);
var root_3 = add_locations(template(`<h2><!></h2>`), Heading[FILENAME], [[19, 2]]);
var root_5 = add_locations(template(`<h3><!></h3>`), Heading[FILENAME], [[21, 2]]);
var root_7 = add_locations(template(`<h4><!></h4>`), Heading[FILENAME], [[23, 2]]);
var root_9 = add_locations(template(`<h5><!></h5>`), Heading[FILENAME], [[25, 2]]);
var root_11 = add_locations(template(`<h6><!></h6>`), Heading[FILENAME], [[27, 2]]);
function Heading($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, Heading);
  const id = mutable_state();
  let depth = prop($$props, "depth", 8);
  let raw = prop($$props, "raw", 8);
  let text2 = prop($$props, "text", 8);
  const { slug, getOptions } = getContext(key);
  const options = getOptions();
  legacy_pre_effect(() => deep_read_state(text2()), () => {
    set(id, options.headerIds ? options.headerPrefix + slug(text2()) : void 0);
  });
  legacy_pre_effect_reset();
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var h1 = root_1();
      var node_1 = child(h1);
      slot(node_1, $$props, "default", {}, null);
      reset(h1);
      template_effect(() => set_attribute(h1, "id", get(id)));
      append($$anchor2, h1);
    };
    var alternate_5 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_2 = first_child(fragment_1);
      {
        var consequent_1 = ($$anchor3) => {
          var h2 = root_3();
          var node_3 = child(h2);
          slot(node_3, $$props, "default", {}, null);
          reset(h2);
          template_effect(() => set_attribute(h2, "id", get(id)));
          append($$anchor3, h2);
        };
        var alternate_4 = ($$anchor3) => {
          var fragment_2 = comment();
          var node_4 = first_child(fragment_2);
          {
            var consequent_2 = ($$anchor4) => {
              var h3 = root_5();
              var node_5 = child(h3);
              slot(node_5, $$props, "default", {}, null);
              reset(h3);
              template_effect(() => set_attribute(h3, "id", get(id)));
              append($$anchor4, h3);
            };
            var alternate_3 = ($$anchor4) => {
              var fragment_3 = comment();
              var node_6 = first_child(fragment_3);
              {
                var consequent_3 = ($$anchor5) => {
                  var h4 = root_7();
                  var node_7 = child(h4);
                  slot(node_7, $$props, "default", {}, null);
                  reset(h4);
                  template_effect(() => set_attribute(h4, "id", get(id)));
                  append($$anchor5, h4);
                };
                var alternate_2 = ($$anchor5) => {
                  var fragment_4 = comment();
                  var node_8 = first_child(fragment_4);
                  {
                    var consequent_4 = ($$anchor6) => {
                      var h5 = root_9();
                      var node_9 = child(h5);
                      slot(node_9, $$props, "default", {}, null);
                      reset(h5);
                      template_effect(() => set_attribute(h5, "id", get(id)));
                      append($$anchor6, h5);
                    };
                    var alternate_1 = ($$anchor6) => {
                      var fragment_5 = comment();
                      var node_10 = first_child(fragment_5);
                      {
                        var consequent_5 = ($$anchor7) => {
                          var h6 = root_11();
                          var node_11 = child(h6);
                          slot(node_11, $$props, "default", {}, null);
                          reset(h6);
                          template_effect(() => set_attribute(h6, "id", get(id)));
                          append($$anchor7, h6);
                        };
                        var alternate = ($$anchor7) => {
                          var text_1 = text();
                          template_effect(() => set_text(text_1, raw()));
                          append($$anchor7, text_1);
                        };
                        if_block(
                          node_10,
                          ($$render) => {
                            if (strict_equals(depth(), 6)) $$render(consequent_5);
                            else $$render(alternate, false);
                          },
                          true
                        );
                      }
                      append($$anchor6, fragment_5);
                    };
                    if_block(
                      node_8,
                      ($$render) => {
                        if (strict_equals(depth(), 5)) $$render(consequent_4);
                        else $$render(alternate_1, false);
                      },
                      true
                    );
                  }
                  append($$anchor5, fragment_4);
                };
                if_block(
                  node_6,
                  ($$render) => {
                    if (strict_equals(depth(), 4)) $$render(consequent_3);
                    else $$render(alternate_2, false);
                  },
                  true
                );
              }
              append($$anchor4, fragment_3);
            };
            if_block(
              node_4,
              ($$render) => {
                if (strict_equals(depth(), 3)) $$render(consequent_2);
                else $$render(alternate_3, false);
              },
              true
            );
          }
          append($$anchor3, fragment_2);
        };
        if_block(
          node_2,
          ($$render) => {
            if (strict_equals(depth(), 2)) $$render(consequent_1);
            else $$render(alternate_4, false);
          },
          true
        );
      }
      append($$anchor2, fragment_1);
    };
    if_block(node, ($$render) => {
      if (strict_equals(depth(), 1)) $$render(consequent);
      else $$render(alternate_5, false);
    });
  }
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Heading = hmr(Heading, () => Heading[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Heading[HMR].source;
    set(Heading[HMR].source, module.default[HMR].original);
  });
}
var Heading_default = Heading;
mark_module_end(Heading);

// node_modules/svelte-markdown/src/renderers/Paragraph.svelte
mark_module_start();
Paragraph[FILENAME] = "node_modules/svelte-markdown/src/renderers/Paragraph.svelte";
var root = add_locations(template(`<p><!></p>`), Paragraph[FILENAME], [[1, 0]]);
function Paragraph($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, Paragraph);
  var p = root();
  var node = child(p);
  slot(node, $$props, "default", {}, null);
  reset(p);
  append($$anchor, p);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Paragraph = hmr(Paragraph, () => Paragraph[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Paragraph[HMR].source;
    set(Paragraph[HMR].source, module.default[HMR].original);
  });
}
var Paragraph_default = Paragraph;
mark_module_end(Paragraph);

// node_modules/svelte-markdown/src/renderers/Text.svelte
mark_module_start();
Text[FILENAME] = "node_modules/svelte-markdown/src/renderers/Text.svelte";
function Text($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, Text);
  let text2 = prop($$props, "text", 8);
  text2();
  let raw = prop($$props, "raw", 8);
  raw();
  var fragment = comment();
  var node = first_child(fragment);
  slot(node, $$props, "default", {}, null);
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Text = hmr(Text, () => Text[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Text[HMR].source;
    set(Text[HMR].source, module.default[HMR].original);
  });
}
var Text_default = Text;
mark_module_end(Text);

// node_modules/svelte-markdown/src/renderers/Image.svelte
mark_module_start();
Image[FILENAME] = "node_modules/svelte-markdown/src/renderers/Image.svelte";
var root2 = add_locations(template(`<img>`), Image[FILENAME], [[7, 0]]);
function Image($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, Image);
  let href = prop($$props, "href", 8, "");
  let title = prop($$props, "title", 8, void 0);
  let text2 = prop($$props, "text", 8, "");
  var img = root2();
  template_effect(() => {
    set_attribute(img, "src", href());
    set_attribute(img, "title", title());
    set_attribute(img, "alt", text2());
  });
  append($$anchor, img);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Image = hmr(Image, () => Image[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Image[HMR].source;
    set(Image[HMR].source, module.default[HMR].original);
  });
}
var Image_default = Image;
mark_module_end(Image);

// node_modules/svelte-markdown/src/renderers/Link.svelte
mark_module_start();
Link[FILENAME] = "node_modules/svelte-markdown/src/renderers/Link.svelte";
var root3 = add_locations(template(`<a><!></a>`), Link[FILENAME], [[6, 0]]);
function Link($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, Link);
  let href = prop($$props, "href", 8, "");
  let title = prop($$props, "title", 8, void 0);
  var a = root3();
  var node = child(a);
  slot(node, $$props, "default", {}, null);
  reset(a);
  template_effect(() => {
    set_attribute(a, "href", href());
    set_attribute(a, "title", title());
  });
  append($$anchor, a);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Link = hmr(Link, () => Link[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Link[HMR].source;
    set(Link[HMR].source, module.default[HMR].original);
  });
}
var Link_default = Link;
mark_module_end(Link);

// node_modules/svelte-markdown/src/renderers/Em.svelte
mark_module_start();
Em[FILENAME] = "node_modules/svelte-markdown/src/renderers/Em.svelte";
var root4 = add_locations(template(`<em><!></em>`), Em[FILENAME], [[1, 0]]);
function Em($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, Em);
  var em = root4();
  var node = child(em);
  slot(node, $$props, "default", {}, null);
  reset(em);
  append($$anchor, em);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Em = hmr(Em, () => Em[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Em[HMR].source;
    set(Em[HMR].source, module.default[HMR].original);
  });
}
var Em_default = Em;
mark_module_end(Em);

// node_modules/svelte-markdown/src/renderers/Del.svelte
mark_module_start();
Del[FILENAME] = "node_modules/svelte-markdown/src/renderers/Del.svelte";
var root5 = add_locations(template(`<del><!></del>`), Del[FILENAME], [[1, 0]]);
function Del($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, Del);
  var del = root5();
  var node = child(del);
  slot(node, $$props, "default", {}, null);
  reset(del);
  append($$anchor, del);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Del = hmr(Del, () => Del[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Del[HMR].source;
    set(Del[HMR].source, module.default[HMR].original);
  });
}
var Del_default = Del;
mark_module_end(Del);

// node_modules/svelte-markdown/src/renderers/Codespan.svelte
mark_module_start();
Codespan[FILENAME] = "node_modules/svelte-markdown/src/renderers/Codespan.svelte";
var root6 = add_locations(template(`<code> </code>`), Codespan[FILENAME], [[5, 0]]);
function Codespan($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, Codespan);
  let raw = prop($$props, "raw", 8);
  init();
  var code = root6();
  var text2 = child(code, true);
  reset(code);
  template_effect(($0) => set_text(text2, $0), [() => raw().replace(/`/g, "")], derived_safe_equal);
  append($$anchor, code);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Codespan = hmr(Codespan, () => Codespan[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Codespan[HMR].source;
    set(Codespan[HMR].source, module.default[HMR].original);
  });
}
var Codespan_default = Codespan;
mark_module_end(Codespan);

// node_modules/svelte-markdown/src/renderers/Strong.svelte
mark_module_start();
Strong[FILENAME] = "node_modules/svelte-markdown/src/renderers/Strong.svelte";
var root7 = add_locations(template(`<strong><!></strong>`), Strong[FILENAME], [[1, 0]]);
function Strong($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, Strong);
  var strong = root7();
  var node = child(strong);
  slot(node, $$props, "default", {}, null);
  reset(strong);
  append($$anchor, strong);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Strong = hmr(Strong, () => Strong[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Strong[HMR].source;
    set(Strong[HMR].source, module.default[HMR].original);
  });
}
var Strong_default = Strong;
mark_module_end(Strong);

// node_modules/svelte-markdown/src/renderers/Table.svelte
mark_module_start();
Table[FILENAME] = "node_modules/svelte-markdown/src/renderers/Table.svelte";
var root8 = add_locations(template(`<table><!></table>`), Table[FILENAME], [[1, 0]]);
function Table($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, Table);
  var table = root8();
  var node = child(table);
  slot(node, $$props, "default", {}, null);
  reset(table);
  append($$anchor, table);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Table = hmr(Table, () => Table[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Table[HMR].source;
    set(Table[HMR].source, module.default[HMR].original);
  });
}
var Table_default = Table;
mark_module_end(Table);

// node_modules/svelte-markdown/src/renderers/TableHead.svelte
mark_module_start();
TableHead[FILENAME] = "node_modules/svelte-markdown/src/renderers/TableHead.svelte";
var root9 = add_locations(template(`<thead><!></thead>`), TableHead[FILENAME], [[1, 0]]);
function TableHead($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, TableHead);
  var thead = root9();
  var node = child(thead);
  slot(node, $$props, "default", {}, null);
  reset(thead);
  append($$anchor, thead);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TableHead = hmr(TableHead, () => TableHead[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TableHead[HMR].source;
    set(TableHead[HMR].source, module.default[HMR].original);
  });
}
var TableHead_default = TableHead;
mark_module_end(TableHead);

// node_modules/svelte-markdown/src/renderers/TableBody.svelte
mark_module_start();
TableBody[FILENAME] = "node_modules/svelte-markdown/src/renderers/TableBody.svelte";
var root10 = add_locations(template(`<tbody><!></tbody>`), TableBody[FILENAME], [[1, 0]]);
function TableBody($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, TableBody);
  var tbody = root10();
  var node = child(tbody);
  slot(node, $$props, "default", {}, null);
  reset(tbody);
  append($$anchor, tbody);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TableBody = hmr(TableBody, () => TableBody[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TableBody[HMR].source;
    set(TableBody[HMR].source, module.default[HMR].original);
  });
}
var TableBody_default = TableBody;
mark_module_end(TableBody);

// node_modules/svelte-markdown/src/renderers/TableRow.svelte
mark_module_start();
TableRow[FILENAME] = "node_modules/svelte-markdown/src/renderers/TableRow.svelte";
var root11 = add_locations(template(`<tr><!></tr>`), TableRow[FILENAME], [[1, 0]]);
function TableRow($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, TableRow);
  var tr = root11();
  var node = child(tr);
  slot(node, $$props, "default", {}, null);
  reset(tr);
  append($$anchor, tr);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TableRow = hmr(TableRow, () => TableRow[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TableRow[HMR].source;
    set(TableRow[HMR].source, module.default[HMR].original);
  });
}
var TableRow_default = TableRow;
mark_module_end(TableRow);

// node_modules/svelte-markdown/src/renderers/TableCell.svelte
mark_module_start();
TableCell[FILENAME] = "node_modules/svelte-markdown/src/renderers/TableCell.svelte";
var root_12 = add_locations(template(`<th><!></th>`), TableCell[FILENAME], [[7, 2]]);
var root_2 = add_locations(template(`<td><!></td>`), TableCell[FILENAME], [[9, 2]]);
function TableCell($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, TableCell);
  let header = prop($$props, "header", 8);
  let align = prop($$props, "align", 8);
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var th = root_12();
      var node_1 = child(th);
      slot(node_1, $$props, "default", {}, null);
      reset(th);
      template_effect(() => set_attribute(th, "align", align()));
      append($$anchor2, th);
    };
    var alternate = ($$anchor2) => {
      var td = root_2();
      var node_2 = child(td);
      slot(node_2, $$props, "default", {}, null);
      reset(td);
      template_effect(() => set_attribute(td, "align", align()));
      append($$anchor2, td);
    };
    if_block(node, ($$render) => {
      if (header()) $$render(consequent);
      else $$render(alternate, false);
    });
  }
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TableCell = hmr(TableCell, () => TableCell[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TableCell[HMR].source;
    set(TableCell[HMR].source, module.default[HMR].original);
  });
}
var TableCell_default = TableCell;
mark_module_end(TableCell);

// node_modules/svelte-markdown/src/renderers/List.svelte
mark_module_start();
List[FILENAME] = "node_modules/svelte-markdown/src/renderers/List.svelte";
var root_13 = add_locations(template(`<ol><!></ol>`), List[FILENAME], [[7, 2]]);
var root_22 = add_locations(template(`<ul><!></ul>`), List[FILENAME], [[9, 2]]);
function List($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, List);
  let ordered = prop($$props, "ordered", 8);
  let start = prop($$props, "start", 8);
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var ol = root_13();
      var node_1 = child(ol);
      slot(node_1, $$props, "default", {}, null);
      reset(ol);
      template_effect(() => set_attribute(ol, "start", start()));
      append($$anchor2, ol);
    };
    var alternate = ($$anchor2) => {
      var ul = root_22();
      var node_2 = child(ul);
      slot(node_2, $$props, "default", {}, null);
      reset(ul);
      append($$anchor2, ul);
    };
    if_block(node, ($$render) => {
      if (ordered()) $$render(consequent);
      else $$render(alternate, false);
    });
  }
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  List = hmr(List, () => List[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = List[HMR].source;
    set(List[HMR].source, module.default[HMR].original);
  });
}
var List_default = List;
mark_module_end(List);

// node_modules/svelte-markdown/src/renderers/ListItem.svelte
mark_module_start();
ListItem[FILENAME] = "node_modules/svelte-markdown/src/renderers/ListItem.svelte";
var root12 = add_locations(template(`<li><!></li>`), ListItem[FILENAME], [[1, 0]]);
function ListItem($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ListItem);
  var li = root12();
  var node = child(li);
  slot(node, $$props, "default", {}, null);
  reset(li);
  append($$anchor, li);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ListItem = hmr(ListItem, () => ListItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ListItem[HMR].source;
    set(ListItem[HMR].source, module.default[HMR].original);
  });
}
var ListItem_default = ListItem;
mark_module_end(ListItem);

// node_modules/svelte-markdown/src/renderers/Hr.svelte
mark_module_start();
Hr[FILENAME] = "node_modules/svelte-markdown/src/renderers/Hr.svelte";
var root13 = add_locations(template(`<hr>`), Hr[FILENAME], [[1, 0]]);
function Hr($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, Hr);
  var hr = root13();
  append($$anchor, hr);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Hr = hmr(Hr, () => Hr[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Hr[HMR].source;
    set(Hr[HMR].source, module.default[HMR].original);
  });
}
var Hr_default = Hr;
mark_module_end(Hr);

// node_modules/svelte-markdown/src/renderers/Html.svelte
mark_module_start();
Html[FILENAME] = "node_modules/svelte-markdown/src/renderers/Html.svelte";
function Html($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, Html);
  let text2 = prop($$props, "text", 8);
  var fragment = comment();
  var node = first_child(fragment);
  html(node, text2, false, false);
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Html = hmr(Html, () => Html[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Html[HMR].source;
    set(Html[HMR].source, module.default[HMR].original);
  });
}
var Html_default = Html;
mark_module_end(Html);

// node_modules/svelte-markdown/src/renderers/Blockquote.svelte
mark_module_start();
Blockquote[FILENAME] = "node_modules/svelte-markdown/src/renderers/Blockquote.svelte";
var root14 = add_locations(template(`<blockquote><!></blockquote>`), Blockquote[FILENAME], [[1, 0]]);
function Blockquote($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, Blockquote);
  var blockquote = root14();
  var node = child(blockquote);
  slot(node, $$props, "default", {}, null);
  reset(blockquote);
  append($$anchor, blockquote);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Blockquote = hmr(Blockquote, () => Blockquote[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Blockquote[HMR].source;
    set(Blockquote[HMR].source, module.default[HMR].original);
  });
}
var Blockquote_default = Blockquote;
mark_module_end(Blockquote);

// node_modules/svelte-markdown/src/renderers/Code.svelte
mark_module_start();
Code[FILENAME] = "node_modules/svelte-markdown/src/renderers/Code.svelte";
var root15 = add_locations(template(`<pre><code> </code></pre>`), Code[FILENAME], [[6, 0, [[6, 18]]]]);
function Code($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, Code);
  let lang = prop($$props, "lang", 8);
  let text2 = prop($$props, "text", 8);
  var pre = root15();
  var code = child(pre);
  var text_1 = child(code, true);
  reset(code);
  reset(pre);
  template_effect(() => {
    set_class(pre, clsx(lang()));
    set_text(text_1, text2());
  });
  append($$anchor, pre);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Code = hmr(Code, () => Code[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Code[HMR].source;
    set(Code[HMR].source, module.default[HMR].original);
  });
}
var Code_default = Code;
mark_module_end(Code);

// node_modules/svelte-markdown/src/renderers/Br.svelte
mark_module_start();
Br[FILENAME] = "node_modules/svelte-markdown/src/renderers/Br.svelte";
var root16 = add_locations(template(`<br><!>`, 1), Br[FILENAME], [[1, 0]]);
function Br($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, Br);
  var fragment = root16();
  var node = sibling(first_child(fragment));
  slot(node, $$props, "default", {}, null);
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Br = hmr(Br, () => Br[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Br[HMR].source;
    set(Br[HMR].source, module.default[HMR].original);
  });
}
var Br_default = Br;
mark_module_end(Br);

// node_modules/svelte-markdown/src/markdown-parser.js
var defaultRenderers = {
  heading: Heading_default,
  paragraph: Paragraph_default,
  text: Text_default,
  image: Image_default,
  link: Link_default,
  em: Em_default,
  strong: Strong_default,
  codespan: Codespan_default,
  del: Del_default,
  table: Table_default,
  tablehead: TableHead_default,
  tablebody: TableBody_default,
  tablerow: TableRow_default,
  tablecell: TableCell_default,
  list: List_default,
  orderedlistitem: null,
  unorderedlistitem: null,
  listitem: ListItem_default,
  hr: Hr_default,
  html: Html_default,
  blockquote: Blockquote_default,
  code: Code_default,
  br: Br_default
};
var defaultOptions = {
  baseUrl: null,
  breaks: false,
  gfm: true,
  headerIds: true,
  headerPrefix: "",
  highlight: null,
  langPrefix: "language-",
  mangle: true,
  pedantic: false,
  renderer: null,
  sanitize: false,
  sanitizer: null,
  silent: false,
  smartLists: false,
  smartypants: false,
  tokenizer: null,
  xhtml: false
};

// node_modules/svelte-markdown/src/SvelteMarkdown.svelte
mark_module_start();
SvelteMarkdown[FILENAME] = "node_modules/svelte-markdown/src/SvelteMarkdown.svelte";
function SvelteMarkdown($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, SvelteMarkdown);
  const preprocessed = mutable_state();
  const slugger = mutable_state();
  const combinedOptions = mutable_state();
  const combinedRenderers = mutable_state();
  let source = prop($$props, "source", 24, () => []);
  let renderers = prop($$props, "renderers", 24, () => ({}));
  let options = prop($$props, "options", 24, () => ({}));
  let isInline = prop($$props, "isInline", 8, false);
  const dispatch = createEventDispatcher();
  let tokens = mutable_state();
  let lexer = mutable_state();
  let mounted = mutable_state();
  setContext(key, {
    slug: (val) => get(slugger) ? get(slugger).slug(val) : "",
    getOptions: () => get(combinedOptions)
  });
  onMount(() => {
    set(mounted, true);
  });
  legacy_pre_effect(() => deep_read_state(source()), () => {
    set(preprocessed, Array.isArray(source()));
  });
  legacy_pre_effect(() => (deep_read_state(source()), Slugger), () => {
    set(slugger, source() ? new Slugger() : void 0);
  });
  legacy_pre_effect(
    () => (defaultOptions, deep_read_state(options())),
    () => {
      set(combinedOptions, { ...defaultOptions, ...options() });
    }
  );
  legacy_pre_effect(
    () => (get(preprocessed), get(tokens), deep_read_state(source()), get(lexer), Lexer, get(combinedOptions), deep_read_state(isInline())),
    () => {
      if (get(preprocessed)) {
        set(tokens, source());
      } else {
        set(lexer, new Lexer(get(combinedOptions)));
        set(tokens, isInline() ? get(lexer).inlineTokens(source()) : get(lexer).lex(source()));
        dispatch("parsed", { tokens: get(tokens) });
      }
    }
  );
  legacy_pre_effect(
    () => (defaultRenderers, deep_read_state(renderers())),
    () => {
      set(combinedRenderers, { ...defaultRenderers, ...renderers() });
    }
  );
  legacy_pre_effect(
    () => (get(mounted), get(preprocessed), get(tokens)),
    () => {
      get(mounted) && !get(preprocessed) && dispatch("parsed", { tokens: get(tokens) });
    }
  );
  legacy_pre_effect_reset();
  init();
  var fragment = comment();
  var node = first_child(fragment);
  Parser_default(node, {
    get tokens() {
      return get(tokens);
    },
    get renderers() {
      return get(combinedRenderers);
    }
  });
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SvelteMarkdown = hmr(SvelteMarkdown, () => SvelteMarkdown[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SvelteMarkdown[HMR].source;
    set(SvelteMarkdown[HMR].source, module.default[HMR].original);
  });
}
var SvelteMarkdown_default = SvelteMarkdown;
mark_module_end(SvelteMarkdown);

// node_modules/svelte-markdown/src/index.js
var src_default = SvelteMarkdown_default;
export {
  src_default as default
};
//# sourceMappingURL=svelte-markdown.js.map
